name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  test:
    name: Test on Node.js ${{ matrix.node-version }} and ${{ matrix.os }}
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        node-version: [16.x, 18.x, 20.x]
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run type checking
        run: npm run type-check

      - name: Run linting
        run: npm run lint:check

      - name: Run formatting check
        run: npm run format:check

      - name: Run continuous testing
        run: npm run test:continuous

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.node-version }}-${{ matrix.os }}
          path: |
            coverage/
            !coverage/tmp/
          retention-days: 30

      - name: Upload coverage to Codecov
        if: matrix.node-version == '18.x' && matrix.os == 'ubuntu-latest'
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: Comment coverage on PR
        if: github.event_name == 'pull_request' && matrix.node-version == '18.x' && matrix.os == 'ubuntu-latest'
        uses: romeovs/lcov-reporter-action@v0.3.1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          lcov-file: ./coverage/lcov.info
          delete-old-comments: true

  build:
    name: Build on Node.js ${{ matrix.node-version }}
    runs-on: ubuntu-latest
    needs: test

    strategy:
      matrix:
        node-version: [16.x, 18.x, 20.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build library
        run: npm run build:prod

      - name: Test built library
        run: |
          node -e "console.log('Testing CommonJS:', require('./dist/cjs/index.js'))"
          node -e "import('./dist/esm/index.js').then(m => console.log('Testing ESM:', m))"

      - name: Check bundle size
        run: |
          echo "Bundle sizes:"
          du -sh dist/cjs dist/esm dist/types
          find dist -name "*.js" -exec wc -c {} + | sort -n

  quality:
    name: Quality Gates
    runs-on: ubuntu-latest
    needs: [test, build]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run all quality checks
        run: npm run quality

      - name: Build and test
        run: |
          npm run build:prod
          npm run test:ci

      - name: Check for security vulnerabilities
        run: npm audit --audit-level moderate

      - name: Generate security report
        run: |
          echo "## Security Audit Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          npm audit --json > security-audit.json || true

          if [ -f "security-audit.json" ]; then
            node -e "
              try {
                const audit = JSON.parse(require('fs').readFileSync('security-audit.json', 'utf8'));
                const vulnerabilities = audit.metadata?.vulnerabilities || {};
                
                console.log('| Severity | Count |');
                console.log('|----------|-------|');
                console.log('| Critical | ' + (vulnerabilities.critical || 0) + ' |');
                console.log('| High | ' + (vulnerabilities.high || 0) + ' |');
                console.log('| Moderate | ' + (vulnerabilities.moderate || 0) + ' |');
                console.log('| Low | ' + (vulnerabilities.low || 0) + ' |');
                console.log('| Info | ' + (vulnerabilities.info || 0) + ' |');
              } catch (e) {
                console.log('No vulnerabilities found or audit data unavailable');
              }
            " >> $GITHUB_STEP_SUMMARY
          fi

      - name: Bundle size analysis
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Bundle Size Analysis" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Calculate and display bundle sizes
          CJS_SIZE=$(du -sh dist/cjs | cut -f1)
          ESM_SIZE=$(du -sh dist/esm | cut -f1)
          TOTAL_SIZE=$(du -sh dist | cut -f1)

          echo "| Format | Size |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|------|" >> $GITHUB_STEP_SUMMARY
          echo "| CommonJS | $CJS_SIZE |" >> $GITHUB_STEP_SUMMARY
          echo "| ESM | $ESM_SIZE |" >> $GITHUB_STEP_SUMMARY
          echo "| **Total** | **$TOTAL_SIZE** |" >> $GITHUB_STEP_SUMMARY
